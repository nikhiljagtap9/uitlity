<?php

namespace App\Http\Controllers;

use App\Models\Batch;
use App\Models\Bharatpay;
use App\Models\Cibilscorebucket;
use App\Models\Disbursebatch;
use App\Models\Disbursement;
use App\Models\Ntc;
use App\Models\Scoreband;
use App\Models\Segments;
use App\Models\Tenure;
use App\Models\Tpvindex;
use App\Services\CbsService;
use App\Services\CkycService;
use App\Services\KycService;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class DisbursementController extends Controller
{
    protected $ckycService;
    protected $cbsApiService;
    protected $KycApiService;
    public function __construct(CkycService $ckycService, CbsService $cbsApiService, KycService $KycApiService)
    {
        $this->ckycService = $ckycService;
        $this->cbsApiService = $cbsApiService;
        $this->KycApiService = $KycApiService;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('disbursement.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $path = $request->file('upload')->store('csv_files');

        $batch = Disbursebatch::create([
            'status' => 'Pending',
            'pf_number' => Auth::user()->name
        ]);
        // Process the CSV file
        $file = fopen(storage_path('app/' . $path), 'r');
        if (!file_exists(storage_path('app/' . $path)) || !is_readable(storage_path('app/' . $path))) {
            $this->error('CSV file not found or not readable.');
            return 1;
        }
        $header = null;
        $total_loan_amount = $total_sanction_amount = $nbfc_sanction_amount = $bank_sanction_amount = 0;
        while ($row = fgetcsv($file)) {
            // Process each row
            if (!$header) {
                $header = $row;
            } else {
                $data = array_combine($header, $row);

                $data['status'] = 'Pending';
                if ($data['NBFC_Reference_Number']) {
                    $NBFC_Reference_Number = $data['NBFC_Reference_Number'];
                    $count = Disbursement::where('NBFC_Reference_Number', $NBFC_Reference_Number)->where('batch_id', $batch->uuid)->count();
                    if ($count > 0) {
                        $data['status'] = 'Duplicate';
                    } else {
                        $count = Disbursement::where('NBFC_Reference_Number', $NBFC_Reference_Number)->where('status', 'Done')->count();
                        if ($count > 0) {
                            $data['status'] = 'Duplicate';
                        }
                    }
                }

                $data['pf_number'] = Auth::user()->name;
                $data['partner_id'] = $request->partner_id;
                $data['product_id'] = $request->product_id;
                $data['batch_id'] = $batch->uuid;

                $total_loan_amount = (float)$data['SANCTION_LIMIT'] + $total_loan_amount;
                $total_sanction_amount = (float)$data['SANCTION_LIMIT'] + $total_sanction_amount;
                $nbfc_sanction_amount = ((float)$data['SANCTION_LIMIT'] - (float)$data['BANK_SANCTION_AMOUNT'] ) + $nbfc_sanction_amount;
                $bank_sanction_amount = (float)$data['BANK_SANCTION_AMOUNT'] + $bank_sanction_amount;
                $data['nbfc_sanction_amount'] = (float)$data['SANCTION_LIMIT'] - (float)$data['BANK_SANCTION_AMOUNT'];
                // $formattedDate = $date->format('Y-m-d');
                $data['SANCTION_DATE'] = Carbon::parse($data['SANCTION_DATE'])->toDateString();
                $data['Market_Rate'] = str_replace(',', '', $data['Market_Rate']);
                $data['Total_Value'] = str_replace(',', '', $data['Total_Value']);
                $data['Date_Disbursement'] = Carbon::parse($data['Date_Disbursement'])->toDateString();
                $data['Maturity_Date'] = Carbon::parse($data['Maturity_Date'])->toDateString();
                $data['EMI_START_DATE'] = Carbon::parse($data['EMI_START_DATE'])->toDateString();
                $data['cersai_date'] = Carbon::parse($data['cersai_date'])->toDateString();
                $data['ckyc'] = $data['CKYC_NUMBER'];
                $data['sanction_amount'] = $data['SANCTION_LIMIT'];
                // $data['dob'] = $data['DOB'];
                // $data['bank_sanction_amount'] = $data['BANK_SANCTION_AMOUNT'];
                $data['SEC_ID_TYPE'] = $data['SEC-ID-TYPE'];
                $data['CKYC_DATE'] = $data['CKYC DATE'];
                // dd($data);

                
                unset($data['Sr_No']);
                unset($data['RESI-STATUS']);
                unset($data['NATIONALITY-CODE']);
                unset($data['SEC-ID-TYPE']);
                unset($data['CKYC_NUMBER']);
                unset($data['CKYC DATE']);
                unset($data['SANCTION_LIMIT']);
                // unset($data['Sr_No']);
                // unset($data['Sr_No']);


                DB::enableQueryLog();
                Disbursement::create($data);

                $queries = DB::getQueryLog();
            }
        }
        // dd($total_loan_amount,$total_sanction_amount,$nbfc_sanction_amount,$bank_sanction_amount);
        $batch->update([
            'total_loan_amount' => $total_loan_amount,
            'total_sanction_amount' => $total_sanction_amount,
            'nbfc_sanction_amount' => $nbfc_sanction_amount,
            'bank_sanction_amount' => $bank_sanction_amount

        ]);
        fclose($file);
        return redirect(route('disbursebatch.show', [$batch->uuid]))->with('success', 'CSV file uploaded successfully!');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Disbursement  $disbursement
     * @return \Illuminate\Http\Response
     */
    public function show(Disbursement $disbursement)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Disbursement  $disbursement
     * @return \Illuminate\Http\Response
     */
    public function edit(Disbursement $disbursement)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Disbursement  $disbursement
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Disbursement $disbursement)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Disbursement  $disbursement
     * @return \Illuminate\Http\Response
     */
    public function destroy(Disbursement $disbursement)
    {
        //
    }

    public function processChunks(Request $request)
    {
        /**
         *
         */
        // Get the current offset from the request, default to 0 if not set
        $Disbursebatch = Disbursebatch::where('uuid', $request->batch_id)->get()[0];
        dd($Disbursebatch);
	 //$Disbursebatch = Disbursebatch::where('uuid', 'BATCH858527906698338')->get()[0];
        $offset = $request->input('offset', 0);
        // Define the chunk size
        $chunkSize = 100;
        // Fetch the chunk of data
        $chunk = Disbursement::where('status', 'Pending')->where('batch_id', $request->batch_id)->take($chunkSize)->get();

        // Process each item in the chunk
        foreach ($chunk as $disbursement) {
            // Your processing logic here
            $res = $this->checkBre($disbursement);
            if ($res['status'] == 'Rejected') {
                $disbursement->update([
                    'message' => $res['message'],
                    'status' => 'Rejected'
                ]);
            } else {
                $disbursement->update([
                    'message' => 'BRE Approved',
                    'status' => 'Approved'
                ]);
            }
        }
        // Check if there are more items to process
        $moreData = Disbursement::where('status', 'Pending')->where('batch_id', $request->batch_id)->exists();
        if (!$moreData) {
            $Disbursebatch->update(['status' => 'Approved']);
        }
        // Return response indicating the next step
        return response()->json([
            'moreData' => $moreData,
            'nextOffset' => $offset + $chunkSize
        ]);
    }
    public function runBre(Request $request)
    {
        Disbursement::where('status', 'Pending')->where('batch_id', $request->batch_id)->chunk(
            1000,
            function ($disbursements) {
                foreach ($disbursements as $disbursement) {
                    /**
                     * Process BRE on each application
                     */
                    $res = $this->checkBre($disbursement);
                    if ($res['status'] == 'Rejected') {
                        $disbursement->update([
                            'message' => $res['message'],
                            'status' => 'Rejected'
                        ]);
                    } else {
                        $disbursement->update([
                            'message' => 'BRE Approved',
                            'status' => 'Approved'
                        ]);
                    }
                }
            }
        );

        Batch::where('uuid', $request->batch_id)->update(['status' => 'Approved']);
        return redirect(route('disbursebatch.show', [$request->batch_id]))->with('success', 'BRE processed successfully!');
    }
    private function apiVerify($data)
    {
        
        if ($data->UDYAM_REGN_NO) {
            /**
             * Verify Udyog Aaadhar
             */
            $udyog_details = $this->KycApiService->udyamVerification($data->UDYAM_REGN_NO, $data);
            if ($udyog_details === false) {
                $arr['message'] = 'Udyam Aadhaar Verification Failed';
                $arr['status'] = 'Rejected';
                return $arr;
            } else {
                $percentage = 0;
                similar_text(strtolower($data->CUSTOMER_NAME), strtolower($udyog_details['nameOfEnterprise']), $percentage);
                $udyaogPer = round($percentage, 2); // Rounds to 2 decimal places

                if ($udyaogPer < 75) {
                    $arr['message'] = 'Udyam Aadhaar Verification Failed, Name Match Per. is ' . $udyaogPer . '%';
                    $arr['status'] = 'Rejected';
                    return $arr;
                }
            }
        }
        if ($data->PAN) {
            $pan_details = $this->KycApiService->PanVerification($data->PAN, $data);
            if ($pan_details === false) {
                $arr['message'] = 'Pan Verification Failed';
                $arr['status'] = 'Rejected';
                return $arr;
            } else {
                $percentage = 0;
                similar_text(strtolower($data->CUSTOMER_NAME), strtolower($pan_details['fullName']), $percentage);
                $roundedPercentage = round($percentage, 2); // Rounds to 2 decimal places
                if ($roundedPercentage < 75) {
                    $arr['message'] = 'Pan Verification Failed, Name Match Per. is ' . $roundedPercentage . '%';
                    $arr['status'] = 'Rejected';
                    return $arr;
                }
            }
        } else {
            $arr['message'] = 'PAN Number Not Available';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        if ($data->ckyc) {
            /**
             * Verify CKYC
             */
            // on prod use $data->ckyc instead of 30029508366219 and $data->dob instead of hard coded value(dd-mm-yyyy)
            $response = $this->ckycService->ckycverify('30029508366219', '21-03-1971',$data);
            $arr = json_decode($response,TRUE);
            $personal_detail = $arr['PID']['PID_DATA']['PERSONAL_DETAILS'];
            $full_name = $personal_detail['FULLNAME'];
            $pan_no = $personal_detail['PAN'];
            $image_details = $arr['PID']['PID_DATA']['IMAGE_DETAILS'];
            if($data->PAN!=$pan_no){
                $arr['message'] = 'PAN Number Not Matched';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        } else {
            $arr['message'] = 'CKYC Number Not Available';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        
        $arr['status'] = 'Approved';
        return $arr;
    }
    private function checkBre($data)
    {
        /**
         * PhonePay BRE
         */
        $arr = array();
        if ($data->AGE) {
            $age = $data->AGE;
            if ($age < 18) {
                $arr['message'] = 'Age less than 18';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        } else {
            $arr['message'] = 'Invalid Age';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        $loan_tenure = $data->LOAN_TENURE;
        if ($data->LOAN_TENURE) {
            if ($loan_tenure < 3) {
                $arr['message'] = 'Loan Tenure less than 3 month';
                $arr['status'] = 'Rejected';
                return $arr;
            } else if ($loan_tenure > 12) {
                $arr['message'] = 'Loan Tenure greater than 12 month';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        }
        $gold_rate = $data->Market_Rate;
        $net_weight = $data->Net_Weight;
        $security_value = ($gold_rate * $net_weight);
        $sanction_amount = $data->sanction_amount;
        $ltv = ($sanction_amount/$security_value)*100;
        $data->update(['LTV'=>$ltv]);
        if($ltv > 75){
            $arr['message'] = 'LTV more than 75%';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        // commented for testing
        // $arr = $this->apiVerify($data);
        // if ($arr['status'] == 'Rejected') {
        //     return $arr;
        // }

        $arr['status'] = 'Approved';
        return $arr;
    }
    private function checkBharatPayBre($data)
    {
        $mca = 10000;

        /**
         * BharatPay BRE
         */
        $arr = array();
        if ($data->dob) {
            $age = Carbon::parse($data->dob)->age;
            if ($age < 21 && $age > 65) {
                $arr['message'] = 'Invalid Age Group';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        } else {
            $arr['message'] = 'Invalid Age';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        if ($data->credit_score) {
            if ($data->credit_score < 700) {
                $arr['message'] = 'Credit Score less than 700';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        } else {
            $arr['message'] = 'Credit Score Invalid';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        $loan_tenure = round($data->loan_tenure / 30, 2);
        if ($loan_tenure) {
            if ($loan_tenure < 3) {
                $arr['message'] = 'Loan Tenure less than 3 month';
                $arr['status'] = 'Rejected';
                return $arr;
            } else if ($loan_tenure > 15) {
                $arr['message'] = 'Loan Tenure greater than 18 month';
                $arr['status'] = 'Rejected';
                return $arr;
            }
        }
        $customer_selection  = $this->customerSelectionBharatPay($data);
        if ($customer_selection['loan_status'] == 'Rejected') {
            $arr['message'] = 'As per customer selection criteria';
            $arr['status'] = 'Rejected';
            return $arr;
        }
        $arr = $this->apiVerify($data);
        if ($arr['status'] == 'Rejected') {
            return $arr;
        }
        $arr['status'] = 'Approved';
        return $arr;
    }
    private function demographics($pincode)
    {
        /**
         *
         */
        /*
        $pincodeCounts = Disbursement::select('business_zipcode', DB::raw('count(*) as total'))
            ->groupBy('business_zipcode')
            ->get();
        $totalDisbursement = Disbursement::count();

        // Calculate the percentage of each pincode
        $pincodePercentages = $pincodeCounts->map(function ($item) use ($totalDisbursement) {
            $item->percentage = ($item->total / $totalDisbursement) * 100;
            return $item;
        });

        dd($pincodePercentages);
        */
        $pincodeCount = Disbursement::where('POSTAL_CODE', $pincode)->where('status', 'Done')->count();

        // Step 2: Calculate the total number of customers
        $totalCustomers = Disbursement::count();

        // Step 3: Calculate the percentage
        if ($totalCustomers > 0) {
            $percentage = ($pincodeCount / $totalCustomers) * 100;
        } else {
            $percentage = 0; // Handle case where there are no customers
        }
        return $percentage;
    }
    public function customerSelectionBharatPay($data = null)
    {
        /***
         * Customer Selection algorithm BharatPay
         */
        $tpv = $data->tpv;
        $risk_segment = $data->Risk_Segment; //REGULAR_ETC/REPEAT/REGULAR_NTC
        $risk_group = $data->Risk_Group;
        $pin_code_colour = $data->Pincode_Color;
        $request_tenure = round($data->loan_tenure / 30, 2);
        $credit_score = $data->credit_score;

        if ($credit_score < 300) {
            $request_tenure_tag = $request_tenure;
            $credit_score_tag = 300;
        } else {
            $credit_score_tag = 700;
            if ($risk_segment == 'REPEAT') {
                $request_tenure_tag = '4_15';
            } else {

                $request_tenure_tag = '4_12';
            }
        }
        //dd($request_tenure_tag);
        $bharatpay = Bharatpay::where('risk_segment', $risk_segment)
            ->where('risk_group', $risk_group)
            ->where('pin_code_colour', $pin_code_colour)
            ->where('requested_tenure', $request_tenure_tag)
            ->where('credit_score', $credit_score_tag)
            ->get()[0];

        /**
         * TPV Based Eligibility
         */
        $calculated_amount = $tpv * $bharatpay->tpv_multiplier * $request_tenure;

        $cal_loan_amount = round(min($calculated_amount, $bharatpay->max_limit), -3);

        if ($cal_loan_amount > 10000) {
            $loan_status = 'Approved';
        } else {
            $loan_status = 'Rejected';
        }
        $arr = array(
            'tpv_multiplier' => $bharatpay->tpv_multiplier,
            'max_limit' => $bharatpay->max_limit,
            'calculated_amount' => $calculated_amount,
            'cal_loan_amount' => $cal_loan_amount,
            'loan_status' => $loan_status
        );
        return $arr;
    }

    public function customerSelection($data = null)
    {
        /**
         * Customer selection algorithm PhonePay
         */
        //Testing variable
        $tpv = $data->tpv;
        $score_band = $data->ANCHOR_SCORE_BAND;
        $vintage_month = $data->ANCHOR_VINTAGE_MONTH;

        $loan_amount = $data->loan_amount;
        $tenure = round($data->loan_tenure / 30, 2);


        $credit_score = $data->credit_score;

        /**
         * CIBIL DUMMY DATA
         */
        $history_month_cnt_non_cc_cd_gl = 80;
        $history_month_cnt = 122;
        $max_dpd_non_cc_last_12mo = 0;


        //1. Defination of Score bands
        $scoreband = Scoreband::where('score_band', $score_band)->get()[0];
        $active_days = '>=' . $scoreband->active_days_per_month;
        $avg_monthly_tpv = '>=' . $scoreband->avg_monthly_tpv;

        //2. Defination of final Segmentation
        $tag =  $this->getTag($tpv);
        $segment = Segments::where('score', $score_band)->get()[0];
        $segment_tag = $segment[$tag];

        //3. Line Assignment Multipliers
        $tpvIndex = Tpvindex::where('score', $score_band)->get()[0];
        $tpvIndex_tag = $tpvIndex[$tag];

        //4. Max Tenure Grid
        //Max Tranche Tenure
        $tenure_grid = Tenure::where('grid', $segment_tag)->get()[0];
        $vintage_month_tag = $this->pp_engagment_age($vintage_month);
        $max_tranche_tenure = $tenure_grid[$vintage_month_tag];
        // Max Tenure
        $max_tenure = MIN($max_tranche_tenure, $tenure);

        //5. Max Loan Cap Grid
        if ($credit_score >= 650) {
            $cibilscorebucket = Cibilscorebucket::where('segment', $segment_tag)->get()[0];
            $grid_tag = $this->gridCap($credit_score);
            $max_loan_cap_grid = $cibilscorebucket[$grid_tag];
        } else {
            $cibilscorebucket = Ntc::where('segment', $segment_tag)->get()[0];
            $max_loan_cap_grid = $cibilscorebucket->guardrail;
        }


        //6. Thick-Thin Multiplier
        if ($credit_score >= 760 && $history_month_cnt_non_cc_cd_gl > 24) {
            $thin_multiplier = 1.4;
        } elseif ($credit_score > 760 && $history_month_cnt > 12) {
            $thin_multiplier = 1.2;
        } elseif ($credit_score >= 650) {
            $thin_multiplier = 1;
        } elseif ($credit_score < 300) {
            $thin_multiplier = 0.8;
        } else {
            $thin_multiplier = 0;
        }


        /**
         * calculated_amount_3m
         */
        //echo $max_dpd_non_cc_last_12mo;
        $calculated_amount_3m = $this->calculate_amount(3, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);
        /**
         * calculated_amount_6m
         */
        $calculated_amount_6m = $this->calculate_amount(6, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);
        /**
         * calculated_amount_9m
         */
        $calculated_amount_9m = $this->calculate_amount(9, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);
        /**
         * calculated_amount_12m
         */
        $calculated_amount_12m = $this->calculate_amount(12, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);
        /**
         * calculated_amount_15m
         */
        $calculated_amount_15m = $this->calculate_amount(15, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);
        /**
         * calculated_amount_18m
         */
        $calculated_amount_18m = $this->calculate_amount(18, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score);

        $calculated_tenure = min($tenure, $max_tranche_tenure);

        //NTC
        $ntcs = Ntc::where('segment', $segment_tag)->get()[0];
        $ntc = $ntcs->guardrail;
        //
        //7. EDI to TPV cap
        //Loan Amount Calculation
        //$max_loan_amount = $tpv * $tpvIndex_tag * $max_tranche_tenure;

        /**
         * Offer Calculation
         */
        if ($credit_score < 300 && ($tpv >= 10000 && $tpv <= 20000)) {
            $minAmount = 10000;
            $maxAmount = $calculated_amount_3m;
            $tenure = 3;
        } elseif ($max_tenure == 3) {
            $minAmount = 10000;
            $maxAmount = $calculated_amount_3m;
            $tenure = 3;
        }

        $arr = array(
            'tpv' => $tpv,
            'score_band' => $score_band,
            'vintage_month' => $vintage_month,
            'credit_score' => $credit_score,
            'requested_tenure' => $tenure,
            'Segment' => $segment_tag,
            'Score Multiplier' => $tpvIndex_tag,
            'Max Tranche Tenure' => $max_tranche_tenure,
            'Max Tenure' => $max_tenure,
            'max_loan_cap_grid' => $max_loan_cap_grid,
            'thin_multiplier' => $thin_multiplier,
            'calculated_amount_3m' => $calculated_amount_3m,
            'calculated_amount_6m' => $calculated_amount_6m,
            'calculated_amount_9m' => $calculated_amount_9m,
            'calculated_amount_12m' => $calculated_amount_12m,
            'calculated_amount_15m' => $calculated_amount_15m,
            'calculated_amount_18m' => $calculated_amount_18m,
            'calculated_tenure' => $calculated_tenure
        );
        $data->update([
            'customer_selection' => json_encode($arr)
        ]);
        return $arr;
    }

    private function calculate_amount($month, $tpv, $max_tenure, $tpvIndex_tag, $thin_multiplier, $max_loan_cap_grid, $loan_amount, $max_dpd_non_cc_last_12mo, $credit_score)
    {
        /**
         * calculated_amount_Xm
         */
        $cal_amount = min($tpv * min($max_tenure, $month) * $tpvIndex_tag * $thin_multiplier, $max_loan_cap_grid);
        if ($max_loan_cap_grid < 300000) {
            $calculated_amount = min($loan_amount, $cal_amount);
        } elseif ($max_loan_cap_grid > 300000 && $max_dpd_non_cc_last_12mo <= 7 && $credit_score >= 750) {
            $calculated_amount = min($loan_amount, $cal_amount);
        } elseif ($max_loan_cap_grid > 300000 && $max_dpd_non_cc_last_12mo >= 7 && $credit_score <= 750) {
            $calculated_amount = min($cal_amount, 300000);
        } else {
            $calculated_amount = min($cal_amount, 300000);
        }
        // Round down to the nearest 1000
        $roundedNumber = floor($calculated_amount / 1000) * 1000;

        //dd($roundedNumber);
        $calculated_amount = round($roundedNumber, 2);

        return min($calculated_amount, $loan_amount);
    }
    private function pp_engagment_age($pp_engagment_age)
    {
        if ($pp_engagment_age >= 3 && $pp_engagment_age < 12) {
            $tag = 'age_3_12';
        } else if ($pp_engagment_age >= 12 && $pp_engagment_age < 18) {
            $tag = 'age_12_18';
        } elseif ($pp_engagment_age >= 18 && $pp_engagment_age < 24) {
            $tag = 'age_18_24';
        } else if ($pp_engagment_age >= 24 && $pp_engagment_age < 36) {
            $tag = 'age_24_36';
        } else if ($pp_engagment_age >= 36) {
            $tag = 'age_36';
        }
        return $tag;
    }
    private function gridCap($cibil_score)
    {
        if ($cibil_score >= 650 && $cibil_score <= 720) {
            $tag = 'cibil_650_720';
        } else if ($cibil_score >= 721 && $cibil_score <= 760) {
            $tag = 'cibil_721_760';
        } elseif ($cibil_score > 760) {
            $tag = 'cibil_760';
        }
        return $tag;
    }
    private function getTag($loan_amount)
    {
        if ($loan_amount > 70000) {
            $tag = 'CS_71';
        } else if ($loan_amount > 60000 && $loan_amount <= 70000) {
            $tag = 'CS_60_70';
        } else if ($loan_amount > 50000 && $loan_amount <= 60000) {
            $tag = 'CS_50_60';
        } else if ($loan_amount > 35000 && $loan_amount <= 50000) {
            $tag = 'CS_35_50';
        } else if ($loan_amount > 25000 && $loan_amount <= 35000) {
            $tag = 'CS_25_35';
        } else if ($loan_amount > 20000 && $loan_amount <= 25000) {
            $tag = 'CS_20_25';
        } else if ($loan_amount > 15000 && $loan_amount <= 20000) {
            $tag = 'CS_15_20';
        } else if ($loan_amount > 10000 && $loan_amount <= 15000) {
            $tag = 'CS_10_15';
        }
        return $tag;
    }
    public function ckyctest()
    {
        /**
         *
         */
        $data = Disbursement::where('lapp_id', 'APP6060266946002484')->get()[0];
        $this->ckycService->ckycverify('30029508366219', '21-03-1971', $data);
    }


    public function PanEnquiryTest()
    {
        /**
         *
         */
        $data = Disbursement::where('lapp_id', 'APP6060266946002484')->get()[0];
        $this->cbsApiService->PanEnquiry('AYLPK8525B', $data);
    }


    public function PanVerifyTest()
    {
        /**
         *
         */
        $data = Disbursement::where('lapp_id', 'APP6060266946002484')->get()[0];
        //dd($data)
        $pan_details = $this->KycApiService->PanVerification('AYLPK8525B', $data);
        //$pan_details = $this->KycApiService->udyamVerification('UDYAM-BR-24-000978', $data);
        //dd($pan_details);
        if ($pan_details === false) {
            $arr['message'] = 'Udyam Verification Failed';
            $arr['status'] = 'Rejected';
        } else {
            /**
             *
             */
            return $pan_details;
        }
    }

    public function calc_ltv(){
        $gold_rate = 6510;
        $net_weight = 54;
        $security_value = ($gold_rate * $net_weight);
        $sanction_amount = 257500;
        $ltv = ($sanction_amount/$security_value)*100;
        dd($ltv);
    }
}
